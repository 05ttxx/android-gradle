apply plugin: 'java'
apply plugin: 'idea'

// 用于检测依赖的包是否有更新
apply plugin: 'versions'    
// apply plugin: "sonar-runner"

// 引入jar包定义
// 这个文件中定义的jar包可以直接在子项目中使用，不需要再次使用 apply from 这个语句
// 
apply from: 'dependencyDefinitions.gradle'

// ======================================================================================
//
// 用于生成项目目录结构
// https://github.com/townsfolk/gradle-templates
// 远程速度太慢，所以下载到本地编译，位于 gradle/gradle-templates 下面
// 
// 默认的设置是
// apply from: 'file:///[gradle-templates]/installation/apply-local.groovy'
// 
// 不过这个好像需要采用绝对路径才行，相对路径不好使，搞了半天没搞定，
// 索性把这段代码直接复制过来，反正就是去配置下jar就行了
// 
buildscript {
    repositories {

        mavenCentral()
	maven{ url 'http://dl.bintray.com/cjstehno/public' }
	maven{ url 'http://maven2.javacv.googlecode.com/git/' }
        // mavenLocal()
    }
    dependencies {
        def templatesVersion = project.hasProperty('gradle.templates.ver') ? project.getProperty('gradle.templates.ver') : project.version
        classpath "gradle-templates:gradle-templates:${templatesVersion}"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.4'
    }
}
// Check to make sure templates.TemplatesPlugin isn't already added.
if (!project.plugins.findPlugin(templates.TemplatesPlugin)) {
    project.apply(plugin: templates.TemplatesPlugin)
}
// ======================================================================================

/**
 * 获取属性，如果没有则采用默认值
 */
def defaultProperty(propertyName, defaultValue) {
    return hasProperty(propertyName) ? project[propertyName] : defaultValue
}

//ext.profile = project['profile']

/**
 * 根据命令行输入的参数来判断profile，两种类别：dev（开发环境）、prod（生产环境）
 * 不提供参数表示为dev
 * 
 * 示例：gradle war -Pprofile=prod
 *
 * TODO: 已经没用了，哪天删掉
 */
def getProfile() {
    return defaultProperty('profile', 'dev')
}

// 所有子项目的通用配置
subprojects { 
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    // JVM 版本号要求
    sourceCompatibility = '1.7'

    // java编译的时候缺省状态下会因为中文字符而失败
    // 所以这儿需要改为utf8
    // 
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    
    repositories {
        mavenCentral()
    }

    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }


    configurations {
        // 
        // 所有需要忽略的包定义在此
        // 
        all*.exclude group: 'commons-httpclient'
        all*.exclude group: 'commons-logging'
        all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }

    dependencies {
        
        //
        // 通用依赖
        // 
        compile (
            libraries.'logback-classic',
            libraries.'jcl-over-slf4j',
            libraries.'log4j-over-slf4j'
        )

        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
        ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')

        compile jarTree

        // 
        // 测试依赖
        // 
        testCompile (
            libraries.'junit',
            libraries.'spring-test'
        )
    }

    // 显示当前项目下所有用于 compile 的 jar.
    // 
    task listJars(description: 'Display all compile jars.') << {
        configurations.compile.each { File file -> println file.name }
    }

}
